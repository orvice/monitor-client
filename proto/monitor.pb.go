// Code generated by protoc-gen-go. DO NOT EDIT.
// source: monitor.proto

package monitorClient

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StreamType int32

const (
	StreamType_None StreamType = 0
)

var StreamType_name = map[int32]string{
	0: "None",
}
var StreamType_value = map[string]int32{
	"None": 0,
}

func (x StreamType) String() string {
	return proto.EnumName(StreamType_name, int32(x))
}
func (StreamType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_monitor_fdb69cf48a37c23b, []int{0}
}

type StreamRequest struct {
	Token                string   `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamRequest) Reset()         { *m = StreamRequest{} }
func (m *StreamRequest) String() string { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()    {}
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_monitor_fdb69cf48a37c23b, []int{0}
}
func (m *StreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamRequest.Unmarshal(m, b)
}
func (m *StreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamRequest.Marshal(b, m, deterministic)
}
func (dst *StreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRequest.Merge(dst, src)
}
func (m *StreamRequest) XXX_Size() int {
	return xxx_messageInfo_StreamRequest.Size(m)
}
func (m *StreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRequest proto.InternalMessageInfo

func (m *StreamRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type StreamResponse struct {
	Type                 StreamType `protobuf:"varint,1,opt,name=Type,proto3,enum=monitorClient.StreamType" json:"Type,omitempty"`
	Body                 string     `protobuf:"bytes,2,opt,name=Body,proto3" json:"Body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *StreamResponse) Reset()         { *m = StreamResponse{} }
func (m *StreamResponse) String() string { return proto.CompactTextString(m) }
func (*StreamResponse) ProtoMessage()    {}
func (*StreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_monitor_fdb69cf48a37c23b, []int{1}
}
func (m *StreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamResponse.Unmarshal(m, b)
}
func (m *StreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamResponse.Marshal(b, m, deterministic)
}
func (dst *StreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamResponse.Merge(dst, src)
}
func (m *StreamResponse) XXX_Size() int {
	return xxx_messageInfo_StreamResponse.Size(m)
}
func (m *StreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamResponse proto.InternalMessageInfo

func (m *StreamResponse) GetType() StreamType {
	if m != nil {
		return m.Type
	}
	return StreamType_None
}

func (m *StreamResponse) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func init() {
	proto.RegisterType((*StreamRequest)(nil), "monitorClient.StreamRequest")
	proto.RegisterType((*StreamResponse)(nil), "monitorClient.StreamResponse")
	proto.RegisterEnum("monitorClient.StreamType", StreamType_name, StreamType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MonitorClientClient is the client API for MonitorClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MonitorClientClient interface {
	Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (MonitorClient_StreamClient, error)
}

type monitorClientClient struct {
	cc *grpc.ClientConn
}

func NewMonitorClientClient(cc *grpc.ClientConn) MonitorClientClient {
	return &monitorClientClient{cc}
}

func (c *monitorClientClient) Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (MonitorClient_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MonitorClient_serviceDesc.Streams[0], "/monitorClient.MonitorClient/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitorClientStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitorClient_StreamClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type monitorClientStreamClient struct {
	grpc.ClientStream
}

func (x *monitorClientStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MonitorClientServer is the server API for MonitorClient service.
type MonitorClientServer interface {
	Stream(*StreamRequest, MonitorClient_StreamServer) error
}

func RegisterMonitorClientServer(s *grpc.Server, srv MonitorClientServer) {
	s.RegisterService(&_MonitorClient_serviceDesc, srv)
}

func _MonitorClient_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitorClientServer).Stream(m, &monitorClientStreamServer{stream})
}

type MonitorClient_StreamServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type monitorClientStreamServer struct {
	grpc.ServerStream
}

func (x *monitorClientStreamServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _MonitorClient_serviceDesc = grpc.ServiceDesc{
	ServiceName: "monitorClient.MonitorClient",
	HandlerType: (*MonitorClientServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _MonitorClient_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "monitor.proto",
}

func init() { proto.RegisterFile("monitor.proto", fileDescriptor_monitor_fdb69cf48a37c23b) }

var fileDescriptor_monitor_fdb69cf48a37c23b = []byte{
	// 184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0xcd, 0xcf, 0xcb,
	0x2c, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x82, 0x71, 0x9d, 0x73, 0x32, 0x53,
	0xf3, 0x4a, 0x94, 0x54, 0xb9, 0x78, 0x83, 0x4b, 0x8a, 0x52, 0x13, 0x73, 0x83, 0x52, 0x0b, 0x4b,
	0x53, 0x8b, 0x4b, 0x84, 0x44, 0xb8, 0x58, 0x43, 0xf2, 0xb3, 0x53, 0xf3, 0x24, 0x18, 0x15, 0x18,
	0x35, 0x38, 0x83, 0x20, 0x1c, 0xa5, 0x60, 0x2e, 0x3e, 0x98, 0xb2, 0xe2, 0x82, 0xfc, 0xbc, 0xe2,
	0x54, 0x21, 0x5d, 0x2e, 0x96, 0x90, 0xca, 0x82, 0x54, 0xb0, 0x32, 0x3e, 0x23, 0x49, 0x3d, 0x14,
	0x63, 0xf5, 0x20, 0x8a, 0x41, 0x0a, 0x82, 0xc0, 0xca, 0x84, 0x84, 0xb8, 0x58, 0x9c, 0xf2, 0x53,
	0x2a, 0x25, 0x98, 0xc0, 0xa6, 0x82, 0xd9, 0x5a, 0x62, 0x5c, 0x5c, 0x08, 0x75, 0x42, 0x1c, 0x5c,
	0x2c, 0x7e, 0xf9, 0x79, 0xa9, 0x02, 0x0c, 0x46, 0x51, 0x5c, 0xbc, 0xbe, 0xc8, 0xa6, 0x09, 0x79,
	0x72, 0xb1, 0x41, 0x14, 0x0a, 0xc9, 0x60, 0xb5, 0x07, 0xea, 0x76, 0x29, 0x59, 0x1c, 0xb2, 0x10,
	0x27, 0x2b, 0x31, 0x18, 0x30, 0x26, 0xb1, 0x81, 0x43, 0xc1, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff,
	0xaf, 0x3f, 0x53, 0xfe, 0x16, 0x01, 0x00, 0x00,
}
